library(preprocessCore)
library(limma)
library(EnhancedVolcano)
library(gplots)
library(RColorBrewer)
# Set environment variable for vroom package
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 8)
# Data Download
geo_id <- "GSE58831"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
# Extract phenodata
phenoData <- pData(phenoData(gse[[1]]))
phenoData_selected <- phenoData[, c(2, 12)]
# Extract feature data
featureData <- fData(gse[[1]])
featureData <- featureData[, c(11, 12)]
# Extract expression data
expr_data <- exprs(gse[[1]])
View(phenoData)
# Transpose expression data
expr_data.t <- t(expr_data)
# Merge datasets
expr_plus_pheno <- cbind(phenoData_selected, expr_data.t)
expr_plus_pheno$characteristics_ch1.2 <- gsub("disease status:", "", expr_plus_pheno$characteristics_ch1.2)
expr_plus_pheno$characteristics_ch1.2 <- gsub("control", "", expr_plus_pheno$characteristics_ch1.2)
# Prepare for collapse rows function
expr_plus_pheno_feature <- cbind(featureData, expr_plus_pheno)
expr_plus_pheno_feature[expr_plus_pheno_feature$ENTREZ_GENE_ID == '', ] <- NA
expr_plus_pheno_feature <- na.omit(expr_plus_pheno_feature)
# Collapse rows in WGCNA
expr_plus_pheno_feature_new <- collapseRows(datET = expr_plus_pheno_feature,
rowGroup = expr_plus_pheno_feature[, 1],
rowID = rownames(expr_plus_pheno_feature))
# Normalize dataset
df_norm <- as.data.frame(normalize.quantiles(as.matrix(expr_plus_pheno_feature_new$datacollapsed)))
# Add column and row names
colnames(df_norm) <- colnames(expr_plus_pheno_feature_new$datacollapsed)
rownames(df_norm) <- rownames(expr_plus_pheno_feature_new$datacollapsed)
# DEGs analysis
df_norm.t <- t(df_norm)
labels <- as.data.frame(rownames(df_norm.t))
labels[, 1] <- gsub("X.", "", labels[, 1])
group <- labels[, 1]
design <- model.matrix(~0 + group)
contrast <- makeContrasts(groupMDS - groupHealthy, levels = design)
fit <- lmFit(df_norm, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
DEGs <- topTable(fit2, adjust = "BH", number = Inf)
setwd("~/ICGEB/Script")
library(GEOquery)
library(dplyr)
library(tidyverse)
library(data.table)
#dataObj <- getGEO(filename = "GSE58831_series_matrix.txt.gz", AnnotGPL=TRUE)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 8)
### data download ###
geo_id <- "GSE58831"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
### extact all three types of data ###
### phenodata ###
phenoData <- pData(phenoData(gse[[1]]))
phenoData_selected <- phenoData[,c(2,12)]
### Feature data ###
featureData <- fData(gse[[1]])
featureData <- featureData[,c(11,12)]
View(featureData)
View(gse)
View(phenoData)
View(phenoData_selected)
### Expression data ###
expr_data <- exprs(gse[[1]])
class(expr_data)
dim(expr_data)
expr_data.t <- t(expr_data)
### merge matrix prep from expr data, pheno data and feature data ####
expr_plus_pheno <- cbind(phenoData_selected, expr_data.t)
expr_plus_pheno$characteristics_ch1.2 <- gsub("disease status:", "", expr_plus_pheno$characteristics_ch1.2)
expr_plus_pheno$characteristics_ch1.2 <- gsub("control", "", expr_plus_pheno$characteristics_ch1.2)
## next to add feature data
# to add feature data first we have to retranspose it ##
expr_plus_pheno <- expr_plus_pheno[,-1]
rownames(expr_plus_pheno) <- make.names(expr_plus_pheno$characteristics_ch1, unique = TRUE)
expr_plus_pheno <- expr_plus_pheno[,-1]
expr_plus_pheno.ret <- t(expr_plus_pheno)
## now add the feature data ###
expr_plus_pheno_feature <- cbind(featureData, expr_plus_pheno.ret)
expr_plus_pheno_feature[expr_plus_pheno_feature$ENTREZ_GENE_ID=='',] <- NA ### subsitute empty cells with NA
expr_plus_pheno_feature <-  na.omit(expr_plus_pheno_feature)
New <- strsplit(as.character(expr_plus_pheno_feature$ENTREZ_GENE_ID),'///')
New <- as.data.frame(sapply(New, "[[", 1))
expr_plus_pheno_feature_new <- cbind(New, expr_plus_pheno_feature)
expr_plus_pheno_feature_new <- expr_plus_pheno_feature_new[,-(2:3)]
colnames(expr_plus_pheno_feature_new )[1] <- "entrez_id"
expr_plus_pheno_feature_new = data.frame(lapply(expr_plus_pheno_feature_new, function(x) as.numeric(as.character(x))),check.names=F, row.names = rownames(expr_plus_pheno_feature_new))
### collapse rows in WGCNA ###
install.packages("WGCNA")
install.packages("BiocManager")
BiocManager::install("GO.db")
library("WGCNA")
expr_plus_pheno_feature_new.colapsed=collapseRows(datET=expr_plus_pheno_feature_new, rowGroup=(expr_plus_pheno_feature_new[,1]), rowID=rownames(expr_plus_pheno_feature_new))
expr_plus_pheno_feature_new.colapsed1 <- expr_plus_pheno_feature_new.colapsed$datETcollapsed
expr_plus_pheno_feature_new.colapsed1 <- as.data.frame(expr_plus_pheno_feature_new.colapsed1)
### first column we have to remove this is extra as we have that details in rownames ###
expr_plus_pheno_feature_new.colapsed1 <- expr_plus_pheno_feature_new.colapsed1[,-1]
#see now it is looking fine. because the x axis showing the samples and Y axis showing the expression values
# Generate that box plot
names(expr_plus_pheno_feature_new.colapsed1)
boxplot(expr_plus_pheno_feature_new.colapsed1[,1:50])
boxplot(expr_plus_pheno_feature_new.colapsed1)
## see the mean in overall data is not uniform ### but the range indicates its already log2 trnaformed
# Normalization
library(preprocessCore)
#names(expr_plus_pheno_feature_new.colapsed1)
df_norm <- as.data.frame(normalize.quantiles(as.matrix(expr_plus_pheno_feature_new.colapsed1)))
##add:colum name row name
colnames(df_norm) <- colnames(expr_plus_pheno_feature_new.colapsed1)
rownames(df_norm) <- rownames(expr_plus_pheno_feature_new.colapsed1)
# Box plot after normalization
boxplot(df_norm[,1:50])
### limma R package to identify DEGs on this last object ###
install.packages("limma")  # Install the package if not already installed
library(limma)  # Load the package
### to extract that sample infor'n ###
df_norm.t <- t(df_norm)
labels <- as.data.frame(rownames(df_norm.t))
labels[,1] <- gsub("X.", "", labels[,1])
labels[,1] <- gsub("MDS.*", "MDS", labels[,1])
labels[,1] <- gsub("Healthy.*", "Healthy", labels[,1])
### now the labels are ready ###
group <- labels[,1]
design <- model.matrix(~0 + group)
contrast <- makeContrasts(groupMDS - groupHealthy, levels = design)
fit <- lmFit(df_norm, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
DEGs <- topTable(fit2, adjust="BH", num=Inf)
#### filtering on the basis of Log2FC and p.value or p.adj ###
filtered_DEGs <- DEGs[(DEGs$logFC >=1 | DEGs$logFC <=-1) & DEGs$adj.P.Val <=0.05, ]
### these two plots are much simple to generate, only thing is you havent tried enough. leave it I did maximum part and that will not be anyhow beneficical to you.
## comin to the issue
#As we have filtered out DEGs based on some p value and Fold change criteria. Now we need to add gene symbol to this object.
#Also we will show all the genes in volcano plot and highlight only following our FC and p value criteria. So we will use DEGs object.
### Feature data ###
featureData <- fData(gse[[1]])
View(featureData)
### these two plots are much simple to generate, only thing is you havent tried enough. leave it I did maximum part and that will not be anyhow beneficical to you.
## comin to the issue
#As we have filtered out DEGs based on some p value and Fold change criteria. Now we need to add gene symbol to this object.
#Also we will show all the genes in volcano plot and highlight only following our FC and p value criteria. So we will use DEGs object.
### Feature data ###
featureData <- fData(gse[[1]])
featureData <- featureData[,c(12,11)]
### these two plots are much simple to generate, only thing is you havent tried enough. leave it I did maximum part and that will not be anyhow beneficical to you.
## comin to the issue
#As we have filtered out DEGs based on some p value and Fold change criteria. Now we need to add gene symbol to this object.
#Also we will show all the genes in volcano plot and highlight only following our FC and p value criteria. So we will use DEGs object.
### Feature data ###
str(gse[[1]])
featureData_selected <- featureData_df[, c("ENTREZ_GENE_ID", "Gene Symbol")]
featureData_selected <- featureData[, c("ENTREZ_GENE_ID", "Gene Symbol")]
# Extract feature data using the correct function
featureData <- featureData(gse[[1]])  # Use featureData() instead of fData()
featureData_df <- as.data.frame(featureData)  # Convert to data frame for easier manipulation
# Select relevant columns (e.g., ENTREZ_GENE_ID and Gene Symbol)
featureData_selected <- featureData_df[, c("ENTREZ_GENE_ID", "Gene Symbol")]
featureData[featureData$ENTREZ_GENE_ID=='',] <- NA ### subsitute empty cells with NA
featureData <-  na.omit(featureData)
t1 <- strsplit(as.character(featureData$ENTREZ_GENE_ID),'///')
t1 <- (sapply(t1, "[[", 1))
t2 <- strsplit(as.character(featureData$`Gene Symbol`),'///')
t2 <- (sapply(t2, "[[", 1))
New_merged <- as.data.frame(cbind(t1, t2)) ### this is a list where we have gene names as per entrez id
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
### merge it with DEGs object ###
BiocManager::install('EnhancedVolcano')
m1 <- merge(New_merged1, newww, by.x = "t1", by.y = "names")
rownames(m1) <- m1[,2]
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value')
newww <- as.data.frame(cbind(names, DEGs))
m1 <- merge(New_merged1, newww, by.x = "t1", by.y = "names")
### merge it with DEGs object ###
BiocManager::install('EnhancedVolcano')
library("EnhancedVolcano")
names <- rownames(DEGs)
newww <- as.data.frame(cbind(names, DEGs))
m1 <- merge(New_merged1, newww, by.x = "t1", by.y = "names")
rownames(m1) <- m1[,2]
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value')
### for more specific cut off ###
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value',
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 3.0)
setwd("~/MDS Microarray Data Analysis")
# Load necessary libraries
library(GEOquery)
library(dplyr)
library(tidyverse)
library(data.table)
# Data download
geo_id <- "GSE58831"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
# Extract phenodata
phenoData <- pData(phenoData(gse[[1]]))
phenoData <- pData(phenoData(gse[[1]]))
gse <- getGEO(geo_id, GSEMatrix = TRUE)
# Extract phenodata
phenoData <- pData(phenoData(gse[[1]]))
setwd("~/MDS Microarray Data Analysis")
setwd("~/MDS Microarray Data Analysis")
library(GEOquery)
setwd("~/MDS Microarray Data Analysis")
library(GEOquery)
library(dplyr)
library(tidyverse)
library(data.table)
#dataObj <- getGEO(filename = "GSE58831_series_matrix.txt.gz", AnnotGPL=TRUE)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 8)
### data download ###
geo_id <- "GSE58831"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
### extact all three types of data ###
### phenodata ###
phenoData <- pData(phenoData(gse[[1]]))
phenoData_selected <- phenoData[,c(2,12)]
### Feature data ###
featureData <- fData(gse[[1]])
featureData <- featureData[,c(11,12)]
### Expression data ###
expr_data <- exprs(gse[[1]])
class(expr_data)
dim(expr_data)
expr_data.t <- t(expr_data)
### merge matrix prep from expr data, pheno data and feature data ####
expr_plus_pheno <- cbind(phenoData_selected, expr_data.t)
expr_plus_pheno$characteristics_ch1.2 <- gsub("disease status:", "", expr_plus_pheno$characteristics_ch1.2)
expr_plus_pheno$characteristics_ch1.2 <- gsub("control", "", expr_plus_pheno$characteristics_ch1.2)
## next to add feature data
# to add feature data first we have to retranspose it ##
expr_plus_pheno <- expr_plus_pheno[,-1]
rownames(expr_plus_pheno) <- make.names(expr_plus_pheno$characteristics_ch1, unique = TRUE)
expr_plus_pheno <- expr_plus_pheno[,-1]
expr_plus_pheno.ret <- t(expr_plus_pheno)
## now add the feature data ###
expr_plus_pheno_feature <- cbind(featureData, expr_plus_pheno.ret)
expr_plus_pheno_feature[expr_plus_pheno_feature$ENTREZ_GENE_ID=='',] <- NA ### subsitute empty cells with NA
expr_plus_pheno_feature <-  na.omit(expr_plus_pheno_feature)
New <- strsplit(as.character(expr_plus_pheno_feature$ENTREZ_GENE_ID),'///')
New <- as.data.frame(sapply(New, "[[", 1))
expr_plus_pheno_feature_new <- cbind(New, expr_plus_pheno_feature)
expr_plus_pheno_feature_new <- expr_plus_pheno_feature_new[,-(2:3)]
colnames(expr_plus_pheno_feature_new )[1] <- "entrez_id"
expr_plus_pheno_feature_new = data.frame(lapply(expr_plus_pheno_feature_new, function(x) as.numeric(as.character(x))),check.names=F, row.names = rownames(expr_plus_pheno_feature_new))
### collapse rows in WGCNA ###
install.packages("WGCNA")
install.packages("BiocManager")
BiocManager::install("GO.db")
BiocManager::install("preprocessCore")
library("GO.db")
library("WGCNA")
expr_plus_pheno_feature_new.colapsed=collapseRows(datET=expr_plus_pheno_feature_new, rowGroup=(expr_plus_pheno_feature_new[,1]), rowID=rownames(expr_plus_pheno_feature_new))
expr_plus_pheno_feature_new.colapsed1 <- expr_plus_pheno_feature_new.colapsed$datETcollapsed
expr_plus_pheno_feature_new.colapsed1 <- as.data.frame(expr_plus_pheno_feature_new.colapsed1)
### first column we have to remove this is extra as we have that details in rownames ###
expr_plus_pheno_feature_new.colapsed1 <- expr_plus_pheno_feature_new.colapsed1[,-1]
#see now it is looking fine. because the x axis showing the samples and Y axis showing the expression values
# Generate that box plot
names(expr_plus_pheno_feature_new.colapsed1)
boxplot(expr_plus_pheno_feature_new.colapsed1[,1:50])
boxplot(expr_plus_pheno_feature_new.colapsed1)
## see the mean in overall data is not uniform ### but the range indicates its already log2 trnaformed
# Normalization
library(preprocessCore)
#names(expr_plus_pheno_feature_new.colapsed1)
df_norm <- as.data.frame(normalize.quantiles(as.matrix(expr_plus_pheno_feature_new.colapsed1)))
##add:colum name row name
colnames(df_norm) <- colnames(expr_plus_pheno_feature_new.colapsed1)
rownames(df_norm) <- rownames(expr_plus_pheno_feature_new.colapsed1)
# Box plot after normalization
boxplot(df_norm[,1:50])
### limma R package to identify DEGs on this last object ###
install.packages("limma")  # Install the package if not already installed
library(limma)  # Load the package
### to extract that sample infor'n ###
df_norm.t <- t(df_norm)
labels <- as.data.frame(rownames(df_norm.t))
labels[,1] <- gsub("X.", "", labels[,1])
labels[,1] <- gsub("MDS.*", "MDS", labels[,1])
labels[,1] <- gsub("Healthy.*", "Healthy", labels[,1])
### now the labels are ready ###
group <- labels[,1]
design <- model.matrix(~0 + group)
contrast <- makeContrasts(groupMDS - groupHealthy, levels = design)
fit <- lmFit(df_norm, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
DEGs <- topTable(fit2, adjust="BH", num=Inf)
#### filtering on the basis of Log2FC and p.value or p.adj ###
filtered_DEGs <- DEGs[(DEGs$logFC >=1 | DEGs$logFC <=-1) & DEGs$adj.P.Val <=0.05, ]
### these two plots are much simple to generate, only thing is you havent tried enough. leave it I did maximum part and that will not be anyhow beneficical to you.
## comin to the issue
#As we have filtered out DEGs based on some p value and Fold change criteria. Now we need to add gene symbol to this object.
#Also we will show all the genes in volcano plot and highlight only following our FC and p value criteria. So we will use DEGs object.
### Feature data ###
featureData <- fData(gse[[1]])
featureData <- featureData[,c(12,11)]
featureData[featureData$ENTREZ_GENE_ID=='',] <- NA ### subsitute empty cells with NA
featureData <-  na.omit(featureData)
t1 <- strsplit(as.character(featureData$ENTREZ_GENE_ID),'///')
t1 <- (sapply(t1, "[[", 1))
t2 <- strsplit(as.character(featureData$`Gene Symbol`),'///')
t2 <- (sapply(t2, "[[", 1))
New_merged <- as.data.frame(cbind(t1, t2)) ### this is a list where we have gene names as per entrez id
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
New_merged <- as.data.frame(cbind(t1, t2)) ### this is a list where we have gene names as per entrez id
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
### to get unique gene list ###
# Trim whitespace from t1 and t2
New_merged$t1 <- trimws(New_merged$t1)
New_merged$t2 <- trimws(New_merged$t2)
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
### to get unique gene list ###
New_merged_unique <- New_merged %>%
group_by(t1) %>%
summarise(gene_symbol = paste(unique(t2), collapse = ", ")) %>%
ungroup()
New_merged <- as.data.frame(cbind(t1, t2)) ### this is a list where we have gene names as per entrez id
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
### to get unique gene list ###
unique_t1 <- make_unique(New_merged1$t1)
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
### to get unique gene list ###
New_merged_unique <- New_merged %>%
group_by(t1) %>%
summarise(gene_symbol = paste(unique(t2), collapse = ", ")) %>%
ungroup()
### to get unique gene list ###
make_unique <- function(x) {
# Create a named vector to count occurrences
counts <- table(x)
unique_names <- x
for (name in names(counts)) {
if (counts[name] > 1) {
# Append a suffix to duplicates
unique_names[x == name] <- paste0(name, "_", seq_len(counts[name]))
}
}
return(unique_names)
}
unique_t1 <- make_unique(New_merged_unique$t1)
### to get unique gene list ###
# Create a function to generate unique row names
make_unique <- function(x) {
# Create a named vector to count occurrences
counts <- table(x)
unique_names <- x
for (name in names(counts)) {
if (counts[name] > 1) {
# Append a suffix to duplicates
unique_names[x == name] <- paste0(name, "_", seq_len(counts[name]))
}
}
return(unique_names)
}
# Apply the function to the t1 column to ensure unique row names
unique_t1 <- make_unique(New_merged_unique$t1)
# Apply the function to the t1 column to ensure unique row names
unique_t1 <- make_unique(New_merged_unique$t1)
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
### to get unique gene list ###
New_merged1 <- New_merged[!duplicated(New_merged), ]
rownames(New_merged1) <- New_merged1$t1
View(expr_plus_pheno.ret)
View(expr_plus_pheno.ret)
View(expr_plus_pheno.ret)
View(rownames)
View(New_merged1)
rownames(New_merged1) <- New_merged1$t1
### merge it with DEGs object ###
BiocManager::install('EnhancedVolcano')
names <- rownames(DEGs)
newww <- as.data.frame(cbind(names, DEGs))
m1 <- merge(New_merged1, newww, by.x = "t1", by.y = "names")
rownames(m1) <- m1[,2]
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value')
### for more specific cut off ###
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value',
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 3.0)
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value',
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 3.0)
### grep up and down regulated genes fro main object ###
## fetch DEGs ids gene expression values from our normalized object###
columns2 <- c("8788","5746","3047","1824","1287","10008","3434","3039","3429","63895","10643","81857","81831","29968","7164","55084","4199","360","51280","26050","10379","474344","8645","10007","57110","55384","132430","10964","10924","151176","400916","56000","146849","23158","29125","57211","140883","79961","6565","3339","57628","4778","8328","55340","4118","10810","8519","11019","8175","55615","85439","389831","114880","81035","4938","2968","3437","10388","121599","2535","5784","4493","285533","4502","5580","64393","83876","10025","55691","29126","4495","375387","1378","8942","7052","10498","28560","388685","94121","11282","254531","89781","2549","29128","114548","253430","7262","7071","54478","3036","84186","115350","55013","116966","64651","2272","22822","55278","10892","195828","5209","2069","54880","3399","931","79805","8404","4086","414332","79884","57217","29933","9134","28461","5522","6583","10734","374393","3007","221061","81575","3394","440423","930","467","1393","51237","170482","79733","1901","79161","89796","23169","2355","26776","10123","2004","100128590","768211","4680","6347","199675","8835","1511","57405","55086","971","84288","1400","9262","93474","54206","55422","2824","140597","150094","1956","30014","5789","619279","3543","3981","58494","646576","144481","1289","6696","83737","2669","49854","2012","1326","7852","84419","6003","8553","54436","51655","973","1870","55790","83891","768206","23462","4885","3569","84620","5055","140733","5791","56937","1178","3164","144455","1390","4616","7837","640","7466","2308","9953","54463","5329","928","288","54541","3280","100996579","152189","23764","5996","6328","1960","1490","114757","340152","54210","78986","151473","6498","387914","5101","753","284207","152687","3669","80243","1880","932","26051","145474","6364","387694","131583","3662","1991","9783","55824","3126","101929623","90102","257194","57824","4929","374","3575","94241","60468","4638","4050","8870","5553","285097","5142","9214","22795","100302650","64399","11245","79661","94120","29760","641518","199786","4852","26659","11067","4092","974","80183","8974","51363","51176","100133941","26018","8013","28387","5897","5450","1791","4311","100507254","5079","7441","29802","9934","9590","10777","1879","5896")
selected_df_new <- df_norm.t[, columns2]
selected_df_new.t <- t(selected_df_new)
### here again to add gene names we have to merge it with the feature data ###
t3 <- as.data.frame(rownames(selected_df_new.t))
selected_df_new.t2 <- cbind(t3, selected_df_new.t)
###New_merged1 this is a non duplicated feature data contain gene name and entrez id and here we are merging based on entrez id ####
m2 <- merge(New_merged1, selected_df_new.t2, by.x = "t1", by.y = "rownames(selected_df_new.t)")
rownames(m2) <- m2[,2]
m2 <- m2[,-(1:2)]
typeof(m2)
### heatmap ##
library(gplots)
library("RColorBrewer")
#pheatmap(m2,cluster_cols = T,scale = 'row',breaks = seq(2.25, 15.87, length.out = 101))
m2 <- as.matrix(m2)
m2.t <- t(m2)
hmcol = colorRampPalette(brewer.pal(9, "YlOrRd"))(100)
library("gplots")
heatmap.2(m2.t, col = hmcol, trace="none", symbreaks = TRUE, dendrogram= "both", symkey = FALSE, margin=c(7, 5), cexCol=0.6, cexRow=0.45, density.info="none",breaks = seq(2, 16, length.out = 101))
dev.off()
heatmap.2(m2.t, col = hmcol, trace="none", symbreaks = TRUE, dendrogram= "both", symkey = FALSE, margin=c(7, 5), cexCol=0.6, cexRow=0.45, density.info="none",breaks = seq(2, 16, length.out = 101))
hmcol = colorRampPalette(brewer.pal(9, "YlOrRd"))(100)
###New_merged1 this is a non duplicated feature data contain gene name and entrez id and here we are merging based on entrez id ####
m2 <- merge(New_merged1, selected_df_new.t2, by.x = "t1", by.y = "rownames(selected_df_new.t)")
rownames(m2) <- m2[,2]
m2 <- m2[,-(1:2)]
typeof(m2)
#### filtering on the basis of Log2FC and p.value or p.adj ###
filtered_DEGs <- DEGs[(DEGs$logFC >=1 | DEGs$logFC <=-1) & DEGs$adj.P.Val <=0.05, ]
names <- rownames(DEGs)
newww <- as.data.frame(cbind(names, DEGs))
m1 <- merge(New_merged1, newww, by.x = "t1", by.y = "names")
rownames(m1) <- m1[,2]
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value')
### for more specific cut off ###
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value',
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 3.0)
### to extract that sample infor'n ###
df_norm.t <- t(df_norm)
# Box plot after normalization
boxplot(df_norm[,1:50])
boxplot(expr_plus_pheno_feature_new.colapsed1[,1:50])
boxplot(expr_plus_pheno_feature_new.colapsed1)
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value')
rownames(m1) <- m1[,2]
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value')
# Install BiocManager if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install EnhancedVolcano if not already installed
BiocManager::install("EnhancedVolcano")
# Load the EnhancedVolcano package
library(EnhancedVolcano)
# Create the volcano plot
EnhancedVolcano(m1,
lab = rownames(m1),
x = 'logFC',
y = 'P.Value',
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 3.0)
